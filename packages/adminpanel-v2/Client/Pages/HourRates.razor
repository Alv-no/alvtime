@using Alvtime.Adminpanel.Client.ErrorHandling
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Utils
@using Alvtime.Adminpanel.Client.Mappers

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <div style="margin-bottom: 10px">
                <MudText Typo="Typo.body1">Timerater for <strong>@TaskContext.Name</strong></MudText>
            </div>
            <div>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => AddEmptyHourRate())">Ny timerate</MudButton>
            </div>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="pl-6">
        <MudTable Items="@TaskContext.HourRates"
                  Context="HourRateContext"
                  Breakpoint="Breakpoint.Sm"
                  Elevation="2"
                  @bind-SelectedItem="_selectedHourRate"
                  CanCancelEdit="true"
                  CommitEditTooltip="Lagre endring"
                  OnCommitEditClick="@(() => HourRateChangeCommitted())"
                  RowEditPreview="BackupHourRate"
                  RowEditCancel="ResetHourRateToOriginalValues"
                  CancelEditTooltip="Avbryt"
                  IsEditRowSwitchingBlocked="false"
                  ApplyButtonPosition="TableApplyButtonPosition.End"
                  EditButtonPosition="TableEditButtonPosition.End"
                  EditTrigger="TableEditTrigger.RowClick">
            <HeaderContent>
                <MudTh>Fra dato (inkl.)</MudTh>
                <MudTh>Rate</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="FromDate">@HourRateContext.FromDate?.ToString("dd/MM/yyyy")</MudTd>
                <MudTd DataLabel="Rate">@HourRateContext.Rate</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="FromDate">
                    <MudDatePicker @bind-Date="@HourRateContext.FromDate" Required/>
                </MudTd>
                <MudTd DataLabel="Rate">
                    <MudNumericField @bind-Value="@HourRateContext.Rate"/>
                </MudTd>
            </RowEditingTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {
    [Inject] HttpClient HttpClient { get; set; }
    private HourRateModel? _selectedHourRate;
    private HourRateModel? _hourRateBeforeEdit;
    private HashSet<HourRateModel>? AllHourRates { get; set; }

    [Parameter] public TaskModel TaskContext { get; set; }

    private async Task HourRateChangeCommitted()
    {
        try
        {
            if (_selectedHourRate is { Id: 0 })
            {
                await HttpClient.PostAsJsonAsync(ApiRoutes.CreateHourRate(TaskContext.Id), _selectedHourRate.MapToHourRateUpsertRequest());
            }
            else
            {
                await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateHourRate(_selectedHourRate!.Id), _selectedHourRate.MapToHourRateUpsertRequest());
            }
        }
        catch (HttpResponseException)
        {
            ResetHourRateToOriginalValues(_selectedHourRate);
        }

        StateHasChanged();
    }

    private void BackupHourRate(object hourRate)
    {
        _hourRateBeforeEdit = new HourRateModel
        {
            FromDate = ((HourRateModel)hourRate).FromDate,
            Rate = ((HourRateModel)hourRate).Rate,
        };
    }

    private void ResetHourRateToOriginalValues(object? hourRate)
    {
        if (hourRate == null)
        {
            if (_selectedHourRate == null)
            {
                return;
            }

            hourRate = _selectedHourRate;
        }

        if (_selectedHourRate!.Id == 0)
        {
            UndoNewHourRate();
        }

        ((HourRateModel)hourRate).FromDate = _hourRateBeforeEdit!.FromDate;
        ((HourRateModel)hourRate).Rate = _hourRateBeforeEdit!.Rate;
    }

    private void AddEmptyHourRate()
    {
        TaskContext.HourRates!.Add(new HourRateModel());
        StateHasChanged();
    }

    private void UndoNewHourRate()
    {
        AllHourRates!.Remove(_selectedHourRate!);
        StateHasChanged();
    }

}