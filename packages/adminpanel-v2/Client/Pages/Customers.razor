@page "/kunder"
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Requests
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Alvtime.Adminpanel.Client.Mappers

<PageTitle>Kunder</PageTitle>

<MudTable Items="@AllCustomers"
          Hover="true"
          Loading="@Loading"
          Striped="true"
          Dense="true"
          Elevation="4"
          CanCancelEdit="true"
          Filter="new Func<CustomerModel, bool>(FilterCustomer)"
          @bind-SelectedItem="_selectedCustomer"
          SortLabel="Sort By"
          CommitEditTooltip="Lagre endring"
          OnCommitEditClick="CustomerChangeCommitted"
          RowEditPreview="BackupCustomer"
          RowEditCancel="ResetCustomerToOriginalValues"
          CancelEditTooltip="Avbryt"
          IsEditRowSwitchingBlocked="false"
          ApplyButtonPosition="TableApplyButtonPosition.End"
          EditButtonPosition="TableEditButtonPosition.End"
          EditTrigger="TableEditTrigger.RowClick">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Kunder</MudText>
        <MudSpacer/>
        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@AddEmptyCustomer">Legg til ny kunde</MudButton>
        <MudTextField @bind-Value="_customerSearchString" Immediate="true" Placeholder="Søk" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 pl-6"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.Name)">Navn</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.ContactPerson)">Kontaktperson</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.ContactEmail)">Epost</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.ContactPhone)">Telefon</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.InvoiceAddress)">Fakturaaddresse</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.OrgNr)">OrgNr</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="ContactPerson">@context.ContactPerson</MudTd>
        <MudTd DataLabel="ContactEmail">@context.ContactEmail</MudTd>
        <MudTd DataLabel="ContactPhone">@context.ContactPhone</MudTd>
        <MudTd DataLabel="InvoiceAddress">@context.InvoiceAddress</MudTd>
        <MudTd DataLabel="OrgNr">@context.OrgNr</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => ShowCustomerDetails(context.Name))">@(context.ShowDetails ? "\u25b2" : "\u25bc") Prosjekter</MudButton>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required/>
        </MudTd>
        <MudTd DataLabel="ContactPerson">
            <MudTextField @bind-Value="@context.ContactPerson"/>
        </MudTd>
        <MudTd DataLabel="ContactEmail">
            <MudTextField @bind-Value="@context.ContactEmail"/>
        </MudTd>
        <MudTd DataLabel="ContactPhone">
            <MudTextField @bind-Value="@context.ContactPhone"/>
        </MudTd>
        <MudTd DataLabel="InvoiceAddress">
            <MudTextField @bind-Value="@context.InvoiceAddress"/>
        </MudTd>
        <MudTd DataLabel="OrgNr">
            <MudTextField @bind-Value="@context.OrgNr"/>
        </MudTd>
    </RowEditingTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="2">
                    <Projects CustomerContext="@context"></Projects>
                </td>
            </MudTr>
        }
    </ChildRowContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="Kunder per side:"/>
    </PagerContent>
</MudTable>


@code {
    [Inject] private HttpClient HttpClient { get; set; }

    private string _customerSearchString = "";
    private CustomerModel? _selectedCustomer;
    private CustomerModel? _customerBeforeEdit;
    private HashSet<CustomerModel>? AllCustomers { get; set; }

    private bool Loading => AllCustomers == null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var customerResponse = await HttpClient.GetAsync(ApiRoutes.CustomersBase);

            if (customerResponse.IsSuccessStatusCode)
            {
                AllCustomers = (await customerResponse.Content.ReadFromJsonAsync<HashSet<CustomerModel>>())?.OrderBy(c => c.Id).ToHashSet();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private bool FilterCustomer(CustomerModel customer)
    {
        if (string.IsNullOrWhiteSpace(_customerSearchString))
            return true;
        return customer.Name.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase) || customer.ContactEmail.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase) || customer.ContactPerson.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase);
    }

    private void AddEmptyCustomer()
    {
        AllCustomers!.Add(new CustomerModel());
    }

    private async Task CustomerChangeCommitted()
    {
        if (_selectedCustomer is { Id: 0 })
        {
            await HttpClient.PostAsJsonAsync(ApiRoutes.CustomersBase, _selectedCustomer.MapToCustomerUpsertRequest());
        }
        else
        {
            await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateCustomer(_selectedCustomer.Id), _selectedCustomer!.MapToCustomerUpsertRequest());
        }

        StateHasChanged();
    }

    private void BackupCustomer(object customer)
    {
        _customerBeforeEdit = new CustomerModel
        {
            Name = ((CustomerModel)customer).Name,
            ContactEmail = ((CustomerModel)customer).ContactEmail,
            ContactPerson = ((CustomerModel)customer).ContactPerson,
            ContactPhone = ((CustomerModel)customer).ContactPhone,
            InvoiceAddress = ((CustomerModel)customer).InvoiceAddress,
            OrgNr = ((CustomerModel)customer).OrgNr,
        };
    }

    private void ResetCustomerToOriginalValues(object? customer)
    {
        if (_selectedCustomer == null || customer == null)
        {
            return;
        }

        if (_selectedCustomer.Id == 0)
        {
            AllCustomers!.Remove(_selectedCustomer);
            StateHasChanged();
        }

        ((CustomerModel)customer).Name = _customerBeforeEdit!.Name;
        ((CustomerModel)customer).ContactEmail = _customerBeforeEdit.ContactEmail;
        ((CustomerModel)customer).ContactPerson = _customerBeforeEdit.ContactPerson;
        ((CustomerModel)customer).ContactPhone = _customerBeforeEdit.ContactPhone;
        ((CustomerModel)customer).InvoiceAddress = _customerBeforeEdit.InvoiceAddress;
        ((CustomerModel)customer).OrgNr = _customerBeforeEdit.OrgNr;
    }

    private void ShowCustomerDetails(string name)
    {
        var customer = AllCustomers!.First(e => e.Name == name);
        customer.ShowDetails = !customer.ShowDetails;
    }
}