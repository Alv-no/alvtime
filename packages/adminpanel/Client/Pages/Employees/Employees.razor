@page "/ansatte"
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.ErrorHandling
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Shared.components
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer

<PageTitle>@Localizer["EmployeesPage.Title"]</PageTitle>

<MudText Typo="Typo.h2">@Localizer["EmployeesPage.Employees"]</MudText>
<MudButton
    Class="my-4"
    Color="Color.Secondary"
    Variant="Variant.Filled"
    OnClick="@(() => { DialogService.ShowAsync<EmployeeDialog>(@Localizer["EmployeesPage.AddEmployee"], new DialogParameters { ["OnEmployeeCreate"] = OnEmployeeCreated }, new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Small }); })">
    <TextAdjuster>@Localizer["EmployeesPage.AddEmployee"]</TextAdjuster>
</MudButton>

<MudTable Items="@AllEmployees"
          Hover="true"
          Loading="@Loading"
          Striped="true"
          Dense="true"
          Elevation="4"
          Filter="new Func<EmployeeModel, bool>(FilterFunc)"
          @bind-SelectedItem="_selectedEmployee"
          SortLabel="@Localizer["Common.SortBy"]"
          OnRowClick="NavigateToEmployee"
          T="EmployeeModel"
          Class="cursor-pointer">
    <ToolBarContent>
        <MudTextField @bind-Value="_searchString" FullWidth="true" Immediate="true" Placeholder="Søk" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="pl-0 mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.Name)">@Localizer["Common.Name"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.Email)">@Localizer["Common.Email"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.StartDate)">@Localizer["Common.StartDate"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.EndDate)">@Localizer["Common.EndDate"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EmployeeModel, object>(x => x.EmployeeId)">@Localizer["Common.EmployeeId"]</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="StartDate">@context.StartDate?.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="EndDate">@context.EndDate?.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="EmployeeId">@context.EmployeeId</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new[] { int.MaxValue, 20, 10 }" RowsPerPageString="@Localizer["EmployeesPage.Pagination.PerPage"]"/>
    </PagerContent>
</MudTable>

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] public HttpInterceptorService Interceptor { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    private string _searchString = "";
    private EmployeeModel? _selectedEmployee;
    private EmployeeModel? _employeeBeforeEdit;
    private EmployeeEmploymentRateModel? _selectedEmploymentRate;
    private EmployeeEmploymentRateModel? _employmentRateBeforeEdit;
    private bool Loading => AllEmployees == null;
    private HashSet<EmployeeModel>? AllEmployees { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();

        await RefreshEmployees();
    }

    private async Task RefreshEmployees()
    {
        try
        {
            AllEmployees = await HttpClient.GetFromJsonAsync<HashSet<EmployeeModel>>(ApiRoutes.EmployeeBase);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void AddEmptyEmployee()
    {
        AllEmployees!.Add(new EmployeeModel
        {
            EmploymentRates = new List<EmployeeEmploymentRateModel>()
        });
    }

    private void AddEmptyEmploymentRate(int userId)
    {
        var employee = AllEmployees!.First(e => e.Id == userId);
        employee.EmploymentRates!.Add(new EmployeeEmploymentRateModel());
    }

    private void ShowDetails(string name)
    {
        var employee = AllEmployees!.First(e => e.Name == name);
        employee.ShowDetails = !employee.ShowDetails;
    }

    private bool FilterFunc(EmployeeModel employee)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return employee.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) || employee.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void BackupEmployee(object employee)
    {
        _employeeBeforeEdit = new EmployeeModel
        {
            Name = ((EmployeeModel)employee).Name,
            Email = ((EmployeeModel)employee).Email,
            StartDate = ((EmployeeModel)employee).StartDate,
            EndDate = ((EmployeeModel)employee).EndDate,
            EmployeeId = ((EmployeeModel)employee).EmployeeId
        };
    }

    private async Task EmployeeChangeCommitted()
    {
        try
        {
            if (_selectedEmployee is { Id: 0 })
            {
                await HttpClient.PostAsJsonAsync(ApiRoutes.EmployeeBase, _selectedEmployee.MapToEmployeeUpsertRequest());
            }
            else
            {
                await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateEmployee(_selectedEmployee!.Id), _selectedEmployee.MapToEmployeeUpsertRequest());
            }

            await RefreshEmployees();
        }
        catch (HttpResponseException)
        {
            ResetEmployeeToOriginalValues(_selectedEmployee);
        }

        StateHasChanged();
    }

    private void ResetEmployeeToOriginalValues(object? employee)
    {
        if (_employeeBeforeEdit == null)
        {
            return;
        }

        if (employee == null)
        {
            if (_selectedEmployee == null)
            {
                return;
            }

            employee = _selectedEmployee;
        }

        if (_selectedEmployee!.Id == 0)
        {
            UndoNewEmployee();
        }

        ((EmployeeModel)employee).Name = _employeeBeforeEdit!.Name;
        ((EmployeeModel)employee).Email = _employeeBeforeEdit.Email;
        ((EmployeeModel)employee).StartDate = _employeeBeforeEdit.StartDate;
        ((EmployeeModel)employee).EndDate = _employeeBeforeEdit.EndDate;
        ((EmployeeModel)employee).EmployeeId = _employeeBeforeEdit.EmployeeId;
        _employeeBeforeEdit = null;
    }

    private void UndoNewEmployee()
    {
        AllEmployees!.Remove(_selectedEmployee!);
        StateHasChanged();
    }

    private void BackupEmploymentRate(object employmentRate)
    {
        _employmentRateBeforeEdit = new EmployeeEmploymentRateModel
        {
            RatePercentage = ((EmployeeEmploymentRateModel)employmentRate).RatePercentage,
            FromDateInclusive = ((EmployeeEmploymentRateModel)employmentRate).FromDateInclusive,
            ToDateInclusive = ((EmployeeEmploymentRateModel)employmentRate).ToDateInclusive,
        };
    }

    private async Task EmploymentRateChangeCommitted(int userId)
    {
        try
        {
            if (_selectedEmploymentRate is { Id: 0 })
            {
                await HttpClient.PostAsJsonAsync(ApiRoutes.CreateEmploymentRateForUser(userId), _selectedEmploymentRate.MapToEmploymentRateUpsertRequest());
            }
            else
            {
                if (_selectedEmploymentRate!.RatePercentage != _employmentRateBeforeEdit!.RatePercentage)
                {
                    var result = await DialogService.ShowMessageBox(
                        "OBS",
                        "Du endrer nå på en stillingsprosent som kan ha påvirkning på eksisterende timer. Vil du fortsette?",
                        yesText: "Ja", cancelText: "Avbryt");
                    if (result == null || !result.Value)
                    {
                        ResetEmploymentRateToOriginalValues(_selectedEmployee);
                        StateHasChanged();
                        return;
                    }
                }

                await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateEmploymentRateForUser(userId, _selectedEmploymentRate!.Id), _selectedEmploymentRate.MapToEmploymentRateUpsertRequest());
            }
        }
        catch (HttpResponseException e)
        {
            ResetEmploymentRateToOriginalValues(_selectedEmploymentRate);
        }


        StateHasChanged();
    }

    private void ResetEmploymentRateToOriginalValues(object? employmentRate)
    {
        if (employmentRate == null)
        {
            if (_selectedEmploymentRate == null)
            {
                return;
            }

            employmentRate = _selectedEmploymentRate;
        }

        if (_selectedEmploymentRate!.Id == 0)
        {
            UndoNewEmploymentRate();
        }

        ((EmployeeEmploymentRateModel)employmentRate).RatePercentage = _employmentRateBeforeEdit!.RatePercentage;
        ((EmployeeEmploymentRateModel)employmentRate).FromDateInclusive = _employmentRateBeforeEdit.FromDateInclusive;
        ((EmployeeEmploymentRateModel)employmentRate).ToDateInclusive = _employmentRateBeforeEdit.ToDateInclusive;
    }

    private void UndoNewEmploymentRate()
    {
        var employee = AllEmployees!.First(e => e.EmploymentRates != null && e.EmploymentRates.Any(er => er.Id == 0));
        employee.EmploymentRates!.Remove(_selectedEmploymentRate!);
        StateHasChanged();
    }

    private EventCallback OnEmployeeCreated => new(this, (Action)(async () =>
    {
        await RefreshEmployees();
        StateHasChanged();
    }));

    private void NavigateToEmployee(TableRowClickEventArgs<EmployeeModel> selectedEmployee)
    {
        Navigation.NavigateTo($"/ansatte/{selectedEmployee.Item.Id}");
    }

}