@page "/ansatte"
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.ErrorHandling
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Shared.components
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer

<PageTitle>@Localizer["EmployeesPage.Title"]</PageTitle>

<MudText Typo="Typo.h2">@Localizer["EmployeesPage.Employees"]</MudText>
<MudButton
    Class="my-4"
    Color="Color.Secondary"
    Variant="Variant.Filled"
    OnClick="@AddEmptyEmployee">
    <TextAdjuster>@Localizer["EmployeesPage.AddEmployee"]</TextAdjuster>
</MudButton>

<MudTable Items="@AllEmployees"
          Hover="true"
          Loading="@Loading"
          Striped="true"
          Dense="true"
          Elevation="4"
          Filter="new Func<EmployeeModel, bool>(FilterFunc)"
          @bind-SelectedItem="_selectedEmployee"
          SortLabel="@Localizer["Common.SortBy"]"
          OnRowClick="NavigateToEmployee"
          T="EmployeeModel"
          Class="cursor-pointer">
    <ToolBarContent>
        <MudTextField @bind-Value="_searchString" FullWidth="true" Immediate="true" Placeholder="Søk" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="pl-0 mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.Name)">@Localizer["Common.Name"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.Email)">@Localizer["Common.Email"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.StartDate)">@Localizer["Common.StartDate"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.EndDate)">@Localizer["Common.EndDate"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EmployeeModel, object>(x => x.EmployeeId)">@Localizer["Common.EmployeeId"]</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="StartDate">@context.StartDate?.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="EndDate">@context.EndDate?.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="EmployeeId">@context.EmployeeId</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new[] { int.MaxValue, 20, 10 }" RowsPerPageString="@Localizer["EmployeesPage.Pagination.PerPage"]"/>
    </PagerContent>
</MudTable>

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] public HttpInterceptorService Interceptor { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    private string _searchString = "";
    private EmployeeModel? _selectedEmployee;
    private EmployeeModel? _employeeBeforeEdit;
    private EmployeeEmploymentRateModel? _selectedEmploymentRate;
    private EmployeeEmploymentRateModel? _employmentRateBeforeEdit;
    private bool Loading => AllEmployees == null;
    private HashSet<EmployeeModel>? AllEmployees { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();

        await RefreshEmployees();
    }

    private async Task RefreshEmployees()
    {
        try
        {
            AllEmployees = await HttpClient.GetFromJsonAsync<HashSet<EmployeeModel>>(ApiRoutes.EmployeeBase);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void AddEmptyEmployee()
    {
        DialogService.ShowAsync<EmployeeDialog>(@Localizer["EmployeesPage.AddEmployee"], new DialogParameters
            {
                ["OnEmployeeSubmit"] = RefreshAfterDialogAction
            },
            new DialogOptions()
            {
                FullWidth = true, 
                MaxWidth = MaxWidth.Small
            });
    }
    
    private EventCallback RefreshAfterDialogAction => new(this, (Action)(async () =>
    {
        await RefreshEmployees();
        StateHasChanged();
    }));

    private bool FilterFunc(EmployeeModel employee)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return employee.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) || employee.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void NavigateToEmployee(TableRowClickEventArgs<EmployeeModel> selectedEmployee)
    {
        Navigation.NavigateTo($"/ansatte/{selectedEmployee.Item.Id}");
    }
}