@page "/ansatte"
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.ErrorHandling
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Shared.components
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer

<PageTitle>@Localizer["EmployeesPage.Title"]</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized>
        <MudText Typo="Typo.h2">@Localizer["EmployeesPage.Employees"]</MudText>
        <MudButton
            Class="my-4"
            Color="Color.Secondary"
            Variant="Variant.Filled"
            OnClick="@AddEmptyEmployee">
            <TextAdjuster>@Localizer["EmployeesPage.AddEmployee"]</TextAdjuster>
        </MudButton>
        <MudTextField
            Value="@_employeeSearchString"
            FullWidth="true"
            Immediate="true"
            ValueChanged="@(new Func<string, Task>(OnFilterChanged))"
            Placeholder="@Localizer["Common.Search"]"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search"
            IconSize="Size.Medium"
            Class="my-4"/>



        <MudPaper
            Elevation="0"
            Class="d-flex flex-wrap justify-start gap-8">
            @if (FilteredEmployees is not null)
            {
                @foreach (var employee in FilteredEmployees)
                {
                    <EmployeeCard
                        ActionLabel="@Localizer["Common.NavigateTo"]"
                        OnActionPress="@(() => Navigation.NavigateTo($"/ansatte/{employee.Id}"))"
                        Name="@employee.Name"/>
                }
            }
        </MudPaper>
    </Authorized>
    
    <NotAuthorized>Du har ikke tilgang til å se dette innholdet.</NotAuthorized>

</AuthorizeView>

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] public HttpInterceptorService Interceptor { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    private string _employeeSearchString = "";
    private EmployeeModel? _selectedEmployee;
    private EmployeeModel? _employeeBeforeEdit;
    private EmployeeEmploymentRateModel? _selectedEmploymentRate;
    private EmployeeEmploymentRateModel? _employmentRateBeforeEdit;
    private bool Loading => AllEmployees == null;
    private HashSet<EmployeeModel>? AllEmployees { get; set; }
    private HashSet<EmployeeModel>? FilteredEmployees { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();

        await RefreshEmployees();
    }

    private async Task RefreshEmployees()
    {
        try
        {
            var employeeResponse = await HttpClient.GetAsync(ApiRoutes.EmployeeBase);
            AllEmployees = (await employeeResponse.Content.ReadFromJsonAsync<HashSet<EmployeeModel>>())?.OrderBy(emp => emp.Name).ToHashSet();
            FilteredEmployees = [..AllEmployees ?? []];
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void AddEmptyEmployee()
    {
        DialogService.ShowAsync<EmployeeDialog>(@Localizer["EmployeesPage.AddEmployee"], new DialogParameters
            {
                ["OnEmployeeSubmit"] = RefreshAfterDialogAction
            },
            new DialogOptions()
            {
                FullWidth = true, 
                MaxWidth = MaxWidth.Small
            });
    }
    
    private EventCallback RefreshAfterDialogAction => new(this, (Action)(async () =>
    {
        await RefreshEmployees();
        StateHasChanged();
    }));

    private bool FilterFunc(EmployeeModel employee)
    {
        if (string.IsNullOrWhiteSpace(_employeeSearchString))
            return true;
        return employee.Name.Contains(_employeeSearchString, StringComparison.OrdinalIgnoreCase) || employee.Email.Contains(_employeeSearchString, StringComparison.OrdinalIgnoreCase);
    }

    private void NavigateToEmployee(TableRowClickEventArgs<EmployeeModel> selectedEmployee)
    {
        Navigation.NavigateTo($"/ansatte/{selectedEmployee.Item.Id}");
    }

    private Task OnFilterChanged(string value)
    {
        _employeeSearchString = value;
        FilterEmployees();
        return Task.CompletedTask;
    }

    private void FilterEmployees()
    {
        if (AllEmployees == null) return;

        FilteredEmployees = AllEmployees
            .Where(employee =>
                string.IsNullOrWhiteSpace(_employeeSearchString) ||
                employee.Name.Contains(_employeeSearchString, StringComparison.OrdinalIgnoreCase) ||
                employee.Email.Contains(_employeeSearchString, StringComparison.OrdinalIgnoreCase))
            .ToHashSet();

        StateHasChanged();
    }
}