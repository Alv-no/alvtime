@page "/ansatte"
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.ErrorHandling

<PageTitle>Ansatte</PageTitle>

<MudTable Items="@AllEmployees"
          Hover="true"
          Loading="@Loading"
          Striped="true"
          Dense="true"
          Elevation="4"
          CanCancelEdit="true"
          Filter="new Func<EmployeeModel, bool>(FilterFunc)"
          @bind-SelectedItem="_selectedEmployee"
          SortLabel="Sort By"
          CommitEditTooltip="Lagre endring"
          OnCommitEditClick="EmployeeChangeCommitted"
          RowEditPreview="BackupEmployee"
          RowEditCancel="ResetEmployeeToOriginalValues"
          CancelEditTooltip="Avbryt"
          IsEditRowSwitchingBlocked="false"
          ApplyButtonPosition="TableApplyButtonPosition.End"
          EditButtonPosition="TableEditButtonPosition.End"
          EditTrigger="TableEditTrigger.RowClick">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Alver</MudText>
        <MudSpacer/>
        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@AddEmptyEmployee">Legg til ny alv</MudButton>
        <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Søk" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 pl-6"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.Name)">Navn</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.Email)">Epost</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.StartDate)">Startdato</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<EmployeeModel, object>(x => x.EndDate)">Sluttdato</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EmployeeModel, object>(x => x.EmployeeId)">Ansattnummer</MudTableSortLabel>
        </MudTh>
        <MudTh>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="StartDate">@context.StartDate?.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="EndDate">@context.EndDate?.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="EmployeeId">@context.EmployeeId</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => ShowDetails(context.Name))">@(context.ShowDetails ? "\u25b2" : "\u25bc") Stillingsprosent</MudButton>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="@context.Name" Required/>
        </MudTd>
        <MudTd DataLabel="Email">
            <MudTextField @bind-Value="@context.Email" Required/>
        </MudTd>
        <MudTd DataLabel="StartDate">
            <MudDatePicker @bind-Date="@context.StartDate" Required/>
        </MudTd>
        <MudTd DataLabel="EndDate">
            <MudDatePicker @bind-Date="@context.EndDate"/>
        </MudTd>
        <MudTd DataLabel="EmployeeId">
            <MudNumericField @bind-Value="@context.EmployeeId" Required/>
        </MudTd>
    </RowEditingTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="2">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">Stillingsprosenter for <strong>@context.Name</strong></MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pl-6">
                            <div style="margin-bottom: 10px;">
                                <MudTable Items="@context.EmploymentRates"
                                          Context="EmploymentRateContext"
                                          Breakpoint="Breakpoint.Sm"
                                          Elevation="2"
                                          @bind-SelectedItem="_selectedEmploymentRate"
                                          CanCancelEdit="true"
                                          CommitEditTooltip="Lagre endring"
                                          OnCommitEditClick="@(() => EmploymentRateChangeCommitted(context.Id))"
                                          RowEditPreview="BackupEmploymentRate"
                                          RowEditCancel="ResetEmploymentRateToOriginalValues"
                                          CancelEditTooltip="Avbryt"
                                          IsEditRowSwitchingBlocked="false"
                                          ApplyButtonPosition="TableApplyButtonPosition.End"
                                          EditButtonPosition="TableEditButtonPosition.End"
                                          EditTrigger="TableEditTrigger.RowClick">
                                    <HeaderContent>
                                        <MudTh>Stillingsprosent</MudTh>
                                        <MudTh>Fra dato (inkl.)</MudTh>
                                        <MudTh>Til dato (inkl.)</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="RatePercentage" Placeholder="50">@EmploymentRateContext.RatePercentage.ToString("####")</MudTd>
                                        <MudTd DataLabel="RateFromDateInclusive">@EmploymentRateContext.FromDateInclusive?.ToString("dd/MM/yyyy")</MudTd>
                                        <MudTd DataLabel="RateToDateInclusive">@EmploymentRateContext.ToDateInclusive?.ToString("dd/MM/yyyy")</MudTd>
                                    </RowTemplate>
                                    <RowEditingTemplate>
                                        <MudTd DataLabel="RatePercentage">
                                            <MudNumericField @bind-Value="@EmploymentRateContext.RatePercentage" Required/>
                                        </MudTd>
                                        <MudTd DataLabel="RateFromDateInclusive">
                                            <MudDatePicker @bind-Date="@EmploymentRateContext.FromDateInclusive" Required/>
                                        </MudTd>
                                        <MudTd DataLabel="RateToDateInclusive">
                                            <MudDatePicker @bind-Date="@EmploymentRateContext.ToDateInclusive" Required/>
                                        </MudTd>
                                    </RowEditingTemplate>
                                </MudTable>
                            </div>
                            <div>
                                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => AddEmptyEmploymentRate(context.Id))">Ny stillingsprosent</MudButton>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new []{ AllEmployees.Count, 20, 10 }" RowsPerPageString="Alver per side:"/>
    </PagerContent>
</MudTable>

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] public HttpInterceptorService Interceptor { get; set; }

    private string _searchString = "";
    private EmployeeModel? _selectedEmployee;
    private EmployeeModel? _employeeBeforeEdit;
    private EmployeeEmploymentRateModel? _selectedEmploymentRate;
    private EmployeeEmploymentRateModel? _employmentRateBeforeEdit;
    private bool Loading => AllEmployees == null;
    private HashSet<EmployeeModel>? AllEmployees { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();

        try
        {
            AllEmployees = await HttpClient.GetFromJsonAsync<HashSet<EmployeeModel>>(ApiRoutes.EmployeeBase);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void AddEmptyEmployee()
    {
        AllEmployees!.Add(new EmployeeModel
        {
            EmploymentRates = new List<EmployeeEmploymentRateModel>()
        });
    }

    private void AddEmptyEmploymentRate(int userId)
    {
        var employee = AllEmployees!.First(e => e.Id == userId);
        employee.EmploymentRates!.Add(new EmployeeEmploymentRateModel());
    }

    private void ShowDetails(string name)
    {
        var employee = AllEmployees!.First(e => e.Name == name);
        employee.ShowDetails = !employee.ShowDetails;
    }

    private bool FilterFunc(EmployeeModel employee)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        return employee.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) || employee.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void BackupEmployee(object employee)
    {
        _employeeBeforeEdit = new EmployeeModel
        {
            Name = ((EmployeeModel)employee).Name,
            Email = ((EmployeeModel)employee).Email,
            StartDate = ((EmployeeModel)employee).StartDate,
            EndDate = ((EmployeeModel)employee).EndDate,
            EmployeeId = ((EmployeeModel)employee).EmployeeId
        };
    }

    private async Task EmployeeChangeCommitted()
    {
        try
        {
            if (_selectedEmployee is { Id: 0 })
            {
                await HttpClient.PostAsJsonAsync(ApiRoutes.EmployeeBase, _selectedEmployee.MapToEmployeeUpsertRequest());
            }
            else
            {
                await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateEmployee(_selectedEmployee!.Id), _selectedEmployee.MapToEmployeeUpsertRequest());
            }
        }
        catch (HttpResponseException)
        {
            ResetEmployeeToOriginalValues(_selectedEmployee);
        }

        StateHasChanged();
    }

    private void ResetEmployeeToOriginalValues(object? employee)
    {
        if (employee == null)
        {
            if (_selectedEmployee == null)
            {
                return;
            }

            employee = _selectedEmployee;
        }

        if (_selectedEmployee!.Id == 0)
        {
            UndoNewEmployee();
        }

        ((EmployeeModel)employee).Name = _employeeBeforeEdit!.Name;
        ((EmployeeModel)employee).Email = _employeeBeforeEdit.Email;
        ((EmployeeModel)employee).StartDate = _employeeBeforeEdit.StartDate;
        ((EmployeeModel)employee).EndDate = _employeeBeforeEdit.EndDate;
        ((EmployeeModel)employee).EmployeeId = _employeeBeforeEdit.EmployeeId;
    }

    private void UndoNewEmployee()
    {
        AllEmployees!.Remove(_selectedEmployee!);
        StateHasChanged();
    }

    private void BackupEmploymentRate(object employmentRate)
    {
        _employmentRateBeforeEdit = new EmployeeEmploymentRateModel
        {
            RatePercentage = ((EmployeeEmploymentRateModel)employmentRate).RatePercentage,
            FromDateInclusive = ((EmployeeEmploymentRateModel)employmentRate).FromDateInclusive,
            ToDateInclusive = ((EmployeeEmploymentRateModel)employmentRate).ToDateInclusive,
        };
    }

    private async Task EmploymentRateChangeCommitted(int userId)
    {
        try
        {
            if (_selectedEmploymentRate is { Id: 0 })
            {
                await HttpClient.PostAsJsonAsync(ApiRoutes.CreateEmploymentRateForUser(userId), _selectedEmploymentRate.MapToEmploymentRateUpsertRequest());
            }
            else
            {
                if (_selectedEmploymentRate!.RatePercentage != _employmentRateBeforeEdit!.RatePercentage)
                {
                    var result = await DialogService.ShowMessageBox(
                        "OBS",
                        "Du endrer nå på en stillingsprosent som kan ha påvirkning på eksisterende timer. Vil du fortsette?",
                        yesText: "Ja", cancelText: "Avbryt");
                    if (result == null || !result.Value)
                    {
                        ResetEmploymentRateToOriginalValues(_selectedEmployee);
                        StateHasChanged();
                        return;
                    }
                }

                await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateEmploymentRateForUser(userId, _selectedEmploymentRate!.Id), _selectedEmploymentRate.MapToEmploymentRateUpsertRequest());
            }
        }
        catch (HttpResponseException e)
        {
            ResetEmploymentRateToOriginalValues(_selectedEmploymentRate);
        }


        StateHasChanged();
    }

    private void ResetEmploymentRateToOriginalValues(object? employmentRate)
    {
        if (employmentRate == null)
        {
            if (_selectedEmploymentRate == null)
            {
                return;
            }

            employmentRate = _selectedEmploymentRate;
        }

        if (_selectedEmploymentRate!.Id == 0)
        {
            UndoNewEmploymentRate();
        }

        ((EmployeeEmploymentRateModel)employmentRate).RatePercentage = _employmentRateBeforeEdit!.RatePercentage;
        ((EmployeeEmploymentRateModel)employmentRate).FromDateInclusive = _employmentRateBeforeEdit.FromDateInclusive;
        ((EmployeeEmploymentRateModel)employmentRate).ToDateInclusive = _employmentRateBeforeEdit.ToDateInclusive;
    }

    private void UndoNewEmploymentRate()
    {
        var employee = AllEmployees!.First(e => e.EmploymentRates != null && e.EmploymentRates.Any(er => er.Id == 0));
        employee.EmploymentRates!.Remove(_selectedEmploymentRate!);
        StateHasChanged();
    }

}