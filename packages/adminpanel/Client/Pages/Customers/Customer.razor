@page "/kunder/{CustomerId}"
@using Alvtime.Adminpanel.Client.ErrorHandling
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer


@if (_customer is not null)
{
    <PageTitle>@Localizer["CustomersPage.Title"]/@_customer.Name</PageTitle>

    <MudText Class="mb-4" Typo="Typo.h2">@_customer.Name</MudText>
    <div class="d-flex flex-column flex-sm-row gap-4 pb-8">
        <MudPaper Class="pa-4">
            <MudText Class="mb-2" Typo="Typo.h6">@Localizer["Common.CompanyInformation"]</MudText>
            <MudText>@Localizer["Common.OrgNr"]: @_customer.OrgNr</MudText>
            <MudText>@Localizer["Common.InvoiceAddress"]: @_customer.InvoiceAddress</MudText>
        </MudPaper>
        <MudPaper Class="pa-4">
            <MudText Class="mb-2" Typo="Typo.h6">@Localizer["Common.ContactInformation"]</MudText>
            <MudText>@Localizer["Common.ContactPerson"]: @_customer.ContactPerson</MudText>
            <MudText>@Localizer["Common.Email"]: <MudLink Href="@($"mailto:{_customer.ContactEmail}")">@_customer.ContactEmail</MudLink></MudText>
            <MudText>@Localizer["Common.Telephone"]: <MudLink Href="@($"tel:{_customer.ContactPhone}")">@_customer.ContactPhone</MudLink></MudText>
        </MudPaper>
    </div>
    <div class="d-flex flex-column flex-lg-row gap-8">
        <MudPaper Elevation="0" Class="flex-grow-1 flex-lg-grow-0 flex-lg-basis-50">
            <MudDataGrid
                Items="_customer.Projects">
                <ToolBarContent>
                    <MudText Class="mb-2" Typo="Typo.h6">@Localizer["Common.Projects"]</MudText>
                    <MudSpacer/>
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Add"
                        Color="Color.Secondary"
                        OnClick="@AddNewProject"
                        aria-label="@Localizer["CustomerPage.AddProject"]">
                    </MudIconButton>
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Edit"
                        Color="Color.Secondary"
                        Disabled="true">
                    </MudIconButton>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Title="@Localizer["Common.Name"]" Property="p => p.Name"/>
                    <PropertyColumn Title="@Localizer["Common.UsingProject"]" Property="p => p.EmployeeCount"></PropertyColumn>
                    <PropertyColumn Title="@Localizer["Common.ActiveTasks"]" Property="p => p.TaskCount"></PropertyColumn>
                </Columns>
            </MudDataGrid>
        </MudPaper>
        <MudPaper Elevation="0" Class="flex-grow-1 flex-lg-grow-0 flex-lg-basis-50">
            <MudDataGrid
                T="TaskModel"
                Items="_aggregatedTasks">
                <ToolBarContent>
                    <MudText Class="mb-2" Typo="Typo.h6">@Localizer["Common.Tasks"]</MudText>
                    <MudSpacer/>
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Add"
                        Color="Color.Secondary"
                        aria-label="@Localizer["CustomerPage.AddTask"]">
                    </MudIconButton>
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Edit"
                        Color="Color.Secondary"
                        Disabled="true">
                    </MudIconButton>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Title="@Localizer["Common.Name"]" Property="p => p.Name"/>
                    <PropertyColumn Title="@Localizer["Common.Description"]" Property="p => p.Description"/>
                    <PropertyColumn Title="@Localizer["Common.Project"]" Property="p => p.ProjectName"/>
                    <TemplateColumn Title="@Localizer["Common.Imposed"]">
                        <CellTemplate>
                            @(context.Item.Imposed ? @Localizer["Common.Yes"] : @Localizer["Common.No"])
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="@Localizer["Common.Locked"]">
                        <CellTemplate>
                            @(context.Item.Locked ? @Localizer["Common.Yes"] : @Localizer["Common.No"])
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudPaper>
    </div>
}
else
{
    <PageTitle>@Localizer["CustomersPage.Title"]/</PageTitle>
    <MudText>Her er det noe rart...</MudText>
}

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] public HttpInterceptorService Interceptor { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    [Parameter] public string CustomerId { get; set; }

    private CustomerModel? _customer;
    private IEnumerable<TaskModel>? _aggregatedTasks;

    protected override async Task OnInitializedAsync()
    {
        // Fetch data for customer
        Interceptor.RegisterEvent();
        await RefreshCustomer();
    }

    private void AddNewProject()
    {
        if (string.IsNullOrEmpty(CustomerId) || !int.TryParse(CustomerId, out int parsedId))
        {
            return;
        }

        DialogService.ShowAsync<ProjectDialog>(Localizer["CustomerPage.AddProject"], new DialogParameters
        {
            ["OnProjectCreate"] = OnProjectCreated,
            ["CustomerId"] = parsedId
            
        },
        new DialogOptions()
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Small
        });
    }

    private EventCallback OnProjectCreated => new(this, (Action)(async () =>
    {
        await RefreshCustomer();
        StateHasChanged();
    }));

    private async Task RefreshCustomer()
    {
        if (string.IsNullOrEmpty(CustomerId) || !int.TryParse(CustomerId, out int parsedId))
        {
            _customer = null;
            return;
        }

        try
        {
            var customerResponse = await HttpClient.GetAsync(ApiRoutes.GetCustomerById(parsedId));

            if (customerResponse.IsSuccessStatusCode)
            {
                _customer = await customerResponse.Content.ReadFromJsonAsync<CustomerModel>();
                if (_customer?.Projects != null)
                    _aggregatedTasks = _customer?.Projects
                        .Where(p => p.Tasks != null)
                        .SelectMany(p => p.Tasks)
                        .Where(t => t != null);
            }
            else
            {
                // Handle non-success status code
                Console.WriteLine($"Error: {customerResponse.StatusCode}");
                _customer = null;
            }
        }
        catch (HttpRequestException e)
        {
            // Handle network errors
            Console.WriteLine($"Network error: {e.Message}");
        }
        catch (Exception e)
        {
            // Handle other exceptions
            Console.WriteLine($"An error occurred: {e.Message}");
        }
    }

}