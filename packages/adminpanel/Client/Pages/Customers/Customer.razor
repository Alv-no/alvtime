@page "/kunder/{CustomerId}"
@using System.Globalization
@using Alvtime.Adminpanel.Client.ErrorHandling
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Shared.components
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer


@if (_customer is not null)
{
    <PageTitle>@Localizer["CustomersPage.Title"]/@_customer.Name</PageTitle>

    <MudPaper Class="mb-4 d-flex flex-row align-center" Elevation="0">
        <MudText Class="me-2" Typo="Typo.h2">@_customer.Name</MudText>
        <MudIconButton
            Icon="@Icons.Material.Filled.Edit"
            Color="Color.Secondary"
            OnClick="@EditCustomer">
        </MudIconButton>
    </MudPaper>
    <div class="d-flex flex-column flex-sm-row gap-4 mb-8">
        <MudPaper Class="pa-4">
            <MudText Class="mb-2" Typo="Typo.h6">@Localizer["Common.CompanyInformation"]</MudText>
            <MudText>@Localizer["Common.OrgNr"]: @_customer.OrgNr</MudText>
            <MudText>@Localizer["Common.InvoiceAddress"]: @_customer.InvoiceAddress</MudText>
        </MudPaper>
        <MudPaper Class="pa-4">
            <MudText Class="mb-2" Typo="Typo.h6">@Localizer["Common.ContactInformation"]</MudText>
            <MudText>@Localizer["Common.ContactPerson"]: @_customer.ContactPerson</MudText>
            <MudText>@Localizer["Common.Email"]: <MudLink Href="@($"mailto:{_customer.ContactEmail}")">@_customer.ContactEmail</MudLink></MudText>
            <MudText>@Localizer["Common.Telephone"]: <MudLink Href="@($"tel:{_customer.ContactPhone}")">@_customer.ContactPhone</MudLink></MudText>
        </MudPaper>
    </div>
    
    <MudPaper Elevation="0" Class="mb-4">
        <MudDataGrid
            T="ProjectModel"
            Items="_customer.Projects"
            MultiSelection="@_multiSelection"
            @bind-SelectedItem="_selectedProject"
            @bind-SelectedItems="_projectSelectionList"
            Filterable="false"
            FooterClass="d-none">
            <ToolBarContent>
                <MudText Class="mb-2" Typo="Typo.h6">@Localizer["Common.Projects"]</MudText>
                <MudSpacer/>
                <MudIconButton
                    Icon="@Icons.Material.Filled.Add"
                    Color="Color.Secondary"
                    OnClick="@AddNewProject"
                    aria-label="@Localizer["CustomerPage.AddProject"]">
                </MudIconButton>
                <MudIconButton
                    Icon="@Icons.Material.Filled.Edit"
                    Color="Color.Secondary"
                    OnClick="@EditProject"
                    Disabled="@(_selectedProject == null)"
                    aria-label="@Localizer["CustomerPage.EditProject"]">
                </MudIconButton>
            </ToolBarContent>
            <Columns>
                <SelectColumn 
                    T="ProjectModel"
                    ShowInHeader="false"
                    />
                <PropertyColumn Title="@Localizer["Common.Name"]" Property="p => p.Name"/>
                <PropertyColumn Title="@Localizer["Common.UsingProject"]" Property="p => p.EmployeeCount"></PropertyColumn>
                <PropertyColumn Title="@Localizer["Common.ActiveTasks"]" Property="p => p.TaskCount"></PropertyColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager
                    PageSizeOptions="new[] { int.MaxValue, 20, 10 }"
                    AllItemsText="@Localizer["Common.Pagination.All"]"
                    RowsPerPageString="@Localizer["Common.Projects.Pagination.PerPage"]"/>
            </PagerContent>
        </MudDataGrid>
    </MudPaper>
    
    <MudPaper Elevation="0" Class="mb-4">
        <MudDataGrid
            T="TaskModel"
            Items="_aggregatedTasks"
            Groupable="true"
            GroupExpanded="false"
            GroupStyle="background-color: var(--mud-palette-tertiary);"
            MultiSelection="@_multiSelection"
            @bind-SelectedItem="_selectedTask"
            @bind-SelectedItems="_taskSelectionList"
            Filterable="false"
            FooterClass="d-none">
            <ToolBarContent>
                <MudText Class="mb-2" Typo="Typo.h6">@Localizer["Common.Tasks"]</MudText>
                <MudSpacer/>
                <MudIconButton
                    Icon="@Icons.Material.Filled.Add"
                    Color="Color.Secondary"
                    OnClick="@AddNewTask"
                    aria-label="@Localizer["CustomerPage.AddTask"]">
                </MudIconButton>
                <MudIconButton
                    Icon="@Icons.Material.Filled.Edit"
                    Color="Color.Secondary"
                    Disabled="@(_selectedTask == null)"
                    OnClick="@EditTask"
                    aria-label="@Localizer["CustomerPage.EditTask"]">
                </MudIconButton>
            </ToolBarContent>
            <Columns>
                <SelectColumn
                    T="TaskModel"
                    ShowInHeader="false"
                    />
                <PropertyColumn
                    Title="@Localizer["Common.Project"]"
                    Property="t => t.ProjectName"
                    Hidden="true"
                    Groupable="true"
                    Grouping
                    GroupBy="t => t.ProjectName">
                    <GroupTemplate>
                        <TextAdjuster>
                            @Localizer["Common.Project"]:
                            @context.Grouping.Key
                            (@context.Grouping.Count() @Localizer["Common.Unit.Pcs"])
                        </TextAdjuster>
                    </GroupTemplate>
                </PropertyColumn>
                <PropertyColumn Title="@Localizer["Common.Name"]" Property="t => t.Name" Groupable="false"/>
                <PropertyColumn Title="@Localizer["Common.Description"]" Property="t => t.Description" Groupable="false"/>
                <TemplateColumn Title="@Localizer["Common.Imposed"]" Groupable="false">
                    <CellTemplate>
                        @(context.Item.Imposed ? @Localizer["Common.Yes"] : @Localizer["Common.No"])
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="@Localizer["Common.Locked"]" Groupable="false">
                    <CellTemplate>
                        @(context.Item.Locked ? @Localizer["Common.Yes"] : @Localizer["Common.No"])
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Title="@Localizer["Common.CompensationRate"]" Property="t => t.CompensationRate" Groupable="false"/>
                <PropertyColumn
                    Title="@Localizer["Common.HourRates"]" Property="t => t.HourRateCount">
                </PropertyColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager
                    PageSizeOptions="new[] { int.MaxValue, 20, 10 }"
                    AllItemsText="@Localizer["Common.Pagination.All"]"
                    RowsPerPageString="@Localizer["Common.Tasks.Pagination.PerPage"]"/>
            </PagerContent>
        </MudDataGrid>
    </MudPaper>
    <MudPaper Elevation="0" Class="mb-4">
        <MudDataGrid
            T="HourRateModel"
            Items="_aggregatedHourRates"
            Groupable="true"
            GroupExpanded="false"
            GroupStyle="background-color: var(--mud-palette-tertiary);"
            MultiSelection="@_multiSelection"
            @bind-SelectedItem="_selectedHourRate"
            @bind-SelectedItems="_hourRateSelectionList"
            Filterable="false"
            FooterClass="d-none">
            <ToolBarContent>
                <MudText Class="mb-2" Typo="Typo.h6">@Localizer["Common.HourRates"]</MudText>
                <MudSpacer/>
                <MudIconButton
                    Icon="@Icons.Material.Filled.Add"
                    Color="Color.Secondary"
                    OnClick="@AddNewHourRate"
                    aria-label="@Localizer["CustomerPage.AddHourRate"]">
                </MudIconButton>
                <MudIconButton
                    Icon="@Icons.Material.Filled.Edit"
                    Color="Color.Secondary"
                    Disabled="@(_selectedHourRate == null)"
                    OnClick="@EditHourRate"
                    aria-label="@Localizer["CustomerPage.EditHourRate"]">
                </MudIconButton>
            </ToolBarContent>
            <Columns>
                <SelectColumn 
                    T="HourRateModel"
                    ShowInHeader="false"
                    />
                <PropertyColumn
                    Title="@Localizer["Common.Task"]"
                    Property="hr => hr.TaskName"
                    Hidden="true"
                    Groupable="true"
                    Grouping
                    GroupBy="hr => hr.TaskName">
                    <GroupTemplate>
                        <TextAdjuster>
                            @Localizer["Common.Task"]:
                            @context.Grouping.Key
                            (@context.Grouping.Count() @Localizer["Common.Unit.Pcs"])

                        </TextAdjuster>
                    </GroupTemplate>
                </PropertyColumn>
                <PropertyColumn
                    Title="@Localizer["Common.Project"]"
                    Property="hr => hr.ProjectName"/>
                <PropertyColumn
                    Title="@Localizer["Common.StartDate.Inclusive"]"
                    Property="hr => hr.FromDate"
                    Format="d"
                    Groupable="false"/>
                <PropertyColumn
                    Title="@Localizer["Common.Rate"]"
                    Property="@(hr => hr.Rate.ToString("C2", CultureInfo.CreateSpecificCulture("no-NO")))"
                    Groupable="false"/>
            </Columns>
            <PagerContent>
                <MudDataGridPager
                    PageSizeOptions="new[] { int.MaxValue, 20, 10 }"
                    AllItemsText="@Localizer["Common.Pagination.All"]"
                    RowsPerPageString="@Localizer["Common.HourRates.Pagination.PerPage"]"/>
            </PagerContent>
        </MudDataGrid>
    </MudPaper>
}
else
{
    <PageTitle>@Localizer["CustomersPage.Title"]/</PageTitle>
    <MudText>Her er det noe rart...</MudText>
}

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] public HttpInterceptorService Interceptor { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    [Parameter] public string CustomerId { get; set; }

    private CustomerModel? _customer;
    private IEnumerable<TaskModel>? _aggregatedTasks;
    private IEnumerable<HourRateModel>? _aggregatedHourRates;

    /* All off this need to be like this, to prevent the UI to allow multiselect. Who knows why it is like that. 🤷‍♂️ */
    private readonly bool _multiSelection = false;
    private HashSet<ProjectModel> _projectSelectionList = [];
    private HashSet<TaskModel> _taskSelectionList = [];
    private HashSet<HourRateModel> _hourRateSelectionList = [];
    private ProjectModel? _selectedProject;
    private TaskModel? _selectedTask;
    private HourRateModel? _selectedHourRate;

    protected override async Task OnInitializedAsync()
    {
        // Fetch data for customer
        Interceptor.RegisterEvent();
        await RefreshCustomer();
    }

    private void AddNewProject()
    {
        if (string.IsNullOrEmpty(CustomerId))
        {
            return;
        }

        DialogService.ShowAsync<ProjectDialog>(Localizer["CustomerPage.AddProject"], new DialogParameters
            {
                ["OnProjectSubmit"] = RefreshAfterDialogAction,
                ["CustomerId"] = CustomerId
            },
            new DialogOptions()
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            });
    }

    private void AddNewTask()
    {
        if (_customer?.Projects == null) return;

        DialogService.ShowAsync<TaskDialog>(Localizer["CustomerPage.AddTask"], new DialogParameters
            {
                ["OnTaskSubmit"] = RefreshAfterDialogAction,
                ["Projects"] = _customer!.Projects
            },
            new DialogOptions()
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            });
    }

    private void AddNewHourRate()
    {
        if (_customer?.Projects == null) return;

        DialogService.ShowAsync<HourRateDialog>(Localizer["CustomerPage.AddHourRate"], new DialogParameters
            {
                ["OnHourRateSubmit"] = RefreshAfterDialogAction,
                ["Projects"] = _customer!.Projects
            },
            new DialogOptions()
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            });
    }
    
    private void EditCustomer()
    {
        if (string.IsNullOrEmpty(CustomerId) || !int.TryParse(CustomerId, out int parsedId))
        {
            return;
        }
        
        DialogService.ShowAsync<CustomerDialog>(Localizer["CustomerPage.EditCustomer"], new DialogParameters
            {
                ["OnCustomerSubmit"] = RefreshAfterDialogAction,
                ["CustomerId"] = parsedId,
                ["CurrentCustomerData"] = _customer
            },
            new DialogOptions()
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            });
    }

    private void EditProject()
    {
        DialogService.ShowAsync<ProjectDialog>(Localizer["CustomerPage.EditProject"], new DialogParameters
            {
                ["OnProjectSubmit"] = RefreshAfterDialogAction,
                ["SelectedProject"] = _selectedProject
            },
            new DialogOptions()
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            });
    }

    private void EditTask()
    {
        DialogService.Show<TaskDialog>(Localizer["CustomerPage.EditTask"], new DialogParameters
        {
            ["OnTaskSubmit"] = RefreshAfterDialogAction,
            ["Projects"] = _customer!.Projects,
            ["SelectedTask"] = _selectedTask
        },
        new DialogOptions()
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Small
        });
    }

    private void EditHourRate()
    {
        DialogService.Show<HourRateDialog>(Localizer["CustomerPage.EditHourRate"], new DialogParameters
            {
                ["OnHourRateSubmit"] = RefreshAfterDialogAction,
                ["Projects"] = _customer!.Projects,
                ["SelectedHourRate"] = _selectedHourRate
            },
            new DialogOptions()
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            }); 
    }

    private EventCallback RefreshAfterDialogAction => new(this, (Action)(async () =>
    {
        await RefreshCustomer();
        StateHasChanged();
    }));

    private async Task RefreshCustomer()
    {
        if (string.IsNullOrEmpty(CustomerId) || !int.TryParse(CustomerId, out int parsedId))
        {
            _customer = null;
            return;
        }

        try
        {
            var customerResponse = await HttpClient.GetAsync(ApiRoutes.GetCustomerById(parsedId));

            if (customerResponse.IsSuccessStatusCode)
            {
                _customer = await customerResponse.Content.ReadFromJsonAsync<CustomerModel>();
                if (_customer?.Projects != null)
                {
                    _aggregatedTasks = _customer?.Projects
                        .Where(p => p.Tasks != null)
                        .SelectMany(p => p.Tasks.Select((t => new TaskModel
                        {
                            Id = t.Id,
                            Name = t.Name,
                            Description = t.Description,
                            CompensationRate = t.CompensationRate,
                            Imposed = t.Imposed,
                            Locked = t.Locked,
                            ProjectId = t.ProjectId,
                            ProjectName = t.ProjectName,
                            HourRates = t.HourRates,
                            HourRateCount = t.HourRates.Count
                        })))
                        .Where(t => t != null);

                    _aggregatedHourRates = _aggregatedTasks
                        .Where(t => t.HourRates != null)
                        .SelectMany(t => t.HourRates.Select(hr => new HourRateModel
                        {
                            Id = hr.Id,
                            FromDate = hr.FromDate,
                            Rate = hr.Rate,
                            ProjectId = t.ProjectId,
                            ProjectName = t.ProjectName,
                            TaskId = hr.TaskId,
                            TaskName = hr.TaskName
                        }))
                        .Where(hr => hr != null)
                        .GroupBy(hr => new { hr.FromDate, hr.Rate, hr.ProjectId, hr.TaskId })
                        .Select(g => g.First())
                        .OrderBy(hr => hr.FromDate)
                        .ThenBy(hr => hr.Rate)
                        .ToList();
                }
            }
            else
            {
                // Handle non-success status code
                Console.WriteLine($"Error: {customerResponse.StatusCode}");
                _customer = null;
                _aggregatedTasks = null;
                _aggregatedHourRates = null;
            }
        }
        catch (HttpRequestException e)
        {
            // Handle network errors
            Console.WriteLine($"Network error: {e.Message}");
        }
        catch (Exception e)
        {
            // Handle other exceptions
            Console.WriteLine($"An error occurred: {e.Message}");
        }
    }

}

