@page "/kunder"
@using Alvtime.Adminpanel.Client.ErrorHandling
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Requests
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Shared.components
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer

<PageTitle>@Localizer["CustomersPage.Title"]</PageTitle>

<MudText Typo="Typo.h2">@Localizer["CustomersPage.Title"]</MudText>
<MudButton
    Class="my-4"
    Color="Color.Secondary"
    Variant="Variant.Filled"
    OnClick="@AddEmptyCustomer">
    <TextAdjuster>
         @Localizer["CustomersPage.AddCustomer"]
    </TextAdjuster>
</MudButton>
<MudTextField
    @bind-Value="_customerSearchString"
    Immediate="true"
    Placeholder="Søk"
    Adornment="Adornment.Start"
    AdornmentIcon="@Icons.Material.Filled.Search"
    IconSize="Size.Medium" Class="my-4">
</MudTextField>
<MudPaper
    Elevation="0"
    Class="d-flex flex-wrap justify-start gap-8">
    @if (AllCustomers is not null)
    {
        @foreach (var customer in AllCustomers)
        {
            <CustomerCard
                ActionLabel="@Localizer["Common.NavigateTo"]"
                OnActionPress="@(() => Navigation.NavigateTo($"/kunder/{customer.Id}"))"
                CustomerName="@customer.Name"
                ProjectCount="@customer.Projects?.Count">
            </CustomerCard>
        }
    }
</MudPaper>

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] public HttpInterceptorService Interceptor { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    private string _customerSearchString = "";
    private CustomerModel? _selectedCustomer;
    private CustomerModel? _customerBeforeEdit;
    private HashSet<CustomerModel>? AllCustomers { get; set; }

    private bool Loading => AllCustomers == null;

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        await RefreshCustomers();
    }

    private async Task RefreshCustomers()
    {
        try
        {
            var customerResponse = await HttpClient.GetAsync(ApiRoutes.CustomersBase);

            if (customerResponse.IsSuccessStatusCode)
            {
                AllCustomers = (await customerResponse.Content.ReadFromJsonAsync<HashSet<CustomerModel>>())?.OrderBy(c => c.Id).ToHashSet();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private bool FilterCustomer(CustomerModel customer)
    {
        if (string.IsNullOrWhiteSpace(_customerSearchString))
            return true;
        return customer.Name.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase) || customer.ContactEmail.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase) || customer.ContactPerson.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase);
    }

    private void AddEmptyCustomer()
    {
        DialogService.ShowAsync<CustomerDialog>(@Localizer["CustomersPage.AddCustomer"], new DialogParameters
            {
                ["OnCustomerSubmit"] = RefreshAfterDialogAction
            },
            new DialogOptions()
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            }
        );
    }

    private EventCallback RefreshAfterDialogAction => new(this, (Action)(async () =>
    {
        await RefreshCustomers();
        StateHasChanged();
    }));

    private async Task CustomerChangeCommitted()
    {
        try
        {
            if (_selectedCustomer is { Id: 0 })
            {
                await HttpClient.PostAsJsonAsync(ApiRoutes.CustomersBase, _selectedCustomer.MapToCustomerUpsertRequest());
            }
            else
            {
                await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateCustomer(_selectedCustomer!.Id), _selectedCustomer!.MapToCustomerUpsertRequest());
            }

            await RefreshCustomers();
        }
        catch (HttpResponseException)
        {
            ResetCustomerToOriginalValues(_selectedCustomer);
        }

        StateHasChanged();
    }

    private void BackupCustomer(object customer)
    {
        _customerBeforeEdit = new CustomerModel
        {
            Name = ((CustomerModel)customer).Name,
            ContactEmail = ((CustomerModel)customer).ContactEmail,
            ContactPerson = ((CustomerModel)customer).ContactPerson,
            ContactPhone = ((CustomerModel)customer).ContactPhone,
            InvoiceAddress = ((CustomerModel)customer).InvoiceAddress,
            OrgNr = ((CustomerModel)customer).OrgNr,
        };
    }

    private void ResetCustomerToOriginalValues(object? customer)
    {
        if (_customerBeforeEdit == null)
        {
            return;
        }

        if (customer == null)
        {
            if (_selectedCustomer == null)
            {
                return;
            }

            customer = _selectedCustomer;
        }

        if (_selectedCustomer!.Id == 0)
        {
            UndoNewCustomer();
        }

        ((CustomerModel)customer).Name = _customerBeforeEdit!.Name;
        ((CustomerModel)customer).ContactEmail = _customerBeforeEdit.ContactEmail;
        ((CustomerModel)customer).ContactPerson = _customerBeforeEdit.ContactPerson;
        ((CustomerModel)customer).ContactPhone = _customerBeforeEdit.ContactPhone;
        ((CustomerModel)customer).InvoiceAddress = _customerBeforeEdit.InvoiceAddress;
        ((CustomerModel)customer).OrgNr = _customerBeforeEdit.OrgNr;
        _customerBeforeEdit = null;
    }

    private void UndoNewCustomer()
    {
        AllCustomers!.Remove(_selectedCustomer!);
        StateHasChanged();
    }

    private void ShowCustomerDetails(string name)
    {
        var customer = AllCustomers!.First(e => e.Name == name);
        customer.ShowDetails = !customer.ShowDetails;
    }

    private void NavigateOnRowClick(CustomerModel selectedCustomer)
    {
        Navigation.NavigateTo($"/kunder/{selectedCustomer.Id}");
    }

}