@page "/kunder"
@using Alvtime.Adminpanel.Client.ErrorHandling
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Requests
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Shared.components
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer

<PageTitle>@Localizer["CustomersPage.Title"]</PageTitle>

<MudText Typo="Typo.h2">@Localizer["CustomersPage.Title"]</MudText>
<MudButton
    Class="my-4"
    Color="Color.Secondary"
    Variant="Variant.Filled"
    OnClick="@AddEmptyCustomer">
    <TextAdjuster>
         @Localizer["CustomersPage.AddCustomer"]
    </TextAdjuster>
</MudButton>
<MudTextField
    Value="@_customerSearchString"
    Immediate="true"
    ValueChanged="@(new Func<string, Task>(OnFilterChanged))"
    Placeholder="@Localizer["Common.Search"]"
    Adornment="Adornment.Start"
    AdornmentIcon="@Icons.Material.Filled.Search"
    IconSize="Size.Medium" 
    Class="my-4">
</MudTextField>
<MudPaper
    Elevation="0"
    Class="d-flex flex-wrap justify-start gap-8">
    @if (FilteredCustomers is not null)
    {
        @foreach (var customer in FilteredCustomers)
        {
            <CustomerCard
                ActionLabel="@Localizer["Common.NavigateTo"]"
                OnActionPress="@(() => Navigation.NavigateTo($"/kunder/{customer.Id}"))"
                CustomerName="@customer.Name"
                ProjectCount="@customer.ProjectCount"
                ContactPerson="@customer.ContactPerson">
            </CustomerCard>
        }
    }
</MudPaper>

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] public HttpInterceptorService Interceptor { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    private string _customerSearchString = "";
    private HashSet<CustomerModel>? AllCustomers { get; set; }
    private HashSet<CustomerModel>? FilteredCustomers { get; set; }

    private bool Loading => AllCustomers == null;

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        await RefreshCustomers();
    }

    private async Task RefreshCustomers()
    {
        try
        {
            var customerResponse = await HttpClient.GetAsync(ApiRoutes.CustomersBase);

            if (customerResponse.IsSuccessStatusCode)
            {
                AllCustomers = (await customerResponse.Content.ReadFromJsonAsync<HashSet<CustomerModel>>())?.OrderBy(c => c.Id).ToHashSet();
                FilteredCustomers = [..AllCustomers ?? []];
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void AddEmptyCustomer()
    {
        DialogService.ShowAsync<CustomerDialog>(@Localizer["CustomersPage.AddCustomer"], new DialogParameters
            {
                ["OnCustomerSubmit"] = RefreshAfterDialogAction
            },
            new DialogOptions()
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            }
        );
    }

    private EventCallback RefreshAfterDialogAction => new(this, (Action)(async () =>
    {
        await RefreshCustomers();
        StateHasChanged();
    }));
    
    private void NavigateToCustomer(int customerId)
    {
        Navigation.NavigateTo($"/kunder/{customerId}");
    }

    private Task OnFilterChanged(string value)
    {
        _customerSearchString = value;
        FilterCustomers();
        return Task.CompletedTask;
    }

    private void FilterCustomers()
    {
        if (AllCustomers == null) return;

        FilteredCustomers = AllCustomers
            .Where(customer =>
                string.IsNullOrWhiteSpace(_customerSearchString) ||
                customer.Name.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase) ||
                customer.ContactEmail.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase) ||
                customer.ContactPerson.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase))
            .ToHashSet();

        StateHasChanged();
    }

}