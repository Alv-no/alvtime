@page "/kunder"
@using Alvtime.Adminpanel.Client.ErrorHandling
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Requests
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.Resources
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer

<PageTitle>@Localizer["CustomersPage.Title"]</PageTitle>

<MudText Typo="Typo.h2">@Localizer["CustomersPage.Title"]</MudText>
<MudButton
    Class="my-4"
    Color="Color.Secondary"
    Variant="Variant.Filled"
    OnClick="@AddEmptyCustomer">
    <TextAdjuster>
         @Localizer["CustomersPage.AddCustomer"]
    </TextAdjuster>
</MudButton>

<MudTable Items="@AllCustomers"
          Hover="true"
          Loading="@Loading"
          Striped="true"
          Dense="true"
          Elevation="4"
          Filter="new Func<CustomerModel, bool>(FilterCustomer)"
          @bind-SelectedItem="_selectedCustomer"
          SortLabel="@Localizer["Common.SortBy"]"
          OnRowClick="NavigateOnRowClick"
          T="CustomerModel"
          Class="cursor-pointer">
    <ToolBarContent>
        <MudTextField @bind-Value="_customerSearchString" Immediate="true" Placeholder="Søk" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 pl-6"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.Name)">Navn</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.ContactPerson)">Kontaktperson</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.ContactEmail)">Epost</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.ContactPhone)">Telefon</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.InvoiceAddress)">Fakturaaddresse</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.OrgNr)">OrgNr</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="ContactPerson">@context.ContactPerson</MudTd>
        <MudTd DataLabel="ContactEmail">@context.ContactEmail</MudTd>
        <MudTd DataLabel="ContactPhone">@context.ContactPhone</MudTd>
        <MudTd DataLabel="InvoiceAddress">@context.InvoiceAddress</MudTd>
        <MudTd DataLabel="OrgNr">@context.OrgNr</MudTd>
        <MudTd>
            @* <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => ShowCustomerDetails(context.Name))">@(context.ShowDetails ? "\u25b2" : "\u25bc") Prosjekter</MudButton> *@
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager 
            PageSizeOptions="new[] { int.MaxValue, 20, 10 }" 
            AllItemsText="@Localizer["Common.Pagination.All"]"
            RowsPerPageString="@Localizer["CustomerPage.Pagination.PerPage"]"/>
    </PagerContent>
</MudTable>

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] public HttpInterceptorService Interceptor { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    private string _customerSearchString = "";
    private CustomerModel? _selectedCustomer;
    private CustomerModel? _customerBeforeEdit;
    private HashSet<CustomerModel>? AllCustomers { get; set; }

    private bool Loading => AllCustomers == null;

    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        await RefreshCustomers();
    }

    private async Task RefreshCustomers()
    {
        try
        {
            var customerResponse = await HttpClient.GetAsync(ApiRoutes.CustomersBase);

            if (customerResponse.IsSuccessStatusCode)
            {
                AllCustomers = (await customerResponse.Content.ReadFromJsonAsync<HashSet<CustomerModel>>())?.OrderBy(c => c.Id).ToHashSet();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private bool FilterCustomer(CustomerModel customer)
    {
        if (string.IsNullOrWhiteSpace(_customerSearchString))
            return true;
        return customer.Name.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase) || customer.ContactEmail.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase) || customer.ContactPerson.Contains(_customerSearchString, StringComparison.OrdinalIgnoreCase);
    }

    private void AddEmptyCustomer()
    {
        DialogService.ShowAsync<CustomerDialog>(@Localizer["CustomersPage.AddCustomer"], new DialogParameters
        {
            ["OnCustomerCreate"] = OnCustomerCreated
        },
        new DialogOptions()
        {
            FullWidth = true, 
            MaxWidth = MaxWidth.Small
        }
        );
    }

    private EventCallback OnCustomerCreated => new(this, (Action)(async () =>
    {
        await RefreshCustomers();
        StateHasChanged();
    }));

    private async Task CustomerChangeCommitted()
    {
        try
        {
            if (_selectedCustomer is { Id: 0 })
            {
                await HttpClient.PostAsJsonAsync(ApiRoutes.CustomersBase, _selectedCustomer.MapToCustomerUpsertRequest());
            }
            else
            {
                await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateCustomer(_selectedCustomer!.Id), _selectedCustomer!.MapToCustomerUpsertRequest());
            }

            await RefreshCustomers();
        }
        catch (HttpResponseException)
        {
            ResetCustomerToOriginalValues(_selectedCustomer);
        }

        StateHasChanged();
    }

    private void BackupCustomer(object customer)
    {
        _customerBeforeEdit = new CustomerModel
        {
            Name = ((CustomerModel)customer).Name,
            ContactEmail = ((CustomerModel)customer).ContactEmail,
            ContactPerson = ((CustomerModel)customer).ContactPerson,
            ContactPhone = ((CustomerModel)customer).ContactPhone,
            InvoiceAddress = ((CustomerModel)customer).InvoiceAddress,
            OrgNr = ((CustomerModel)customer).OrgNr,
        };
    }

    private void ResetCustomerToOriginalValues(object? customer)
    {
        if (_customerBeforeEdit == null)
        {
            return;
        }

        if (customer == null)
        {
            if (_selectedCustomer == null)
            {
                return;
            }

            customer = _selectedCustomer;
        }

        if (_selectedCustomer!.Id == 0)
        {
            UndoNewCustomer();
        }

        ((CustomerModel)customer).Name = _customerBeforeEdit!.Name;
        ((CustomerModel)customer).ContactEmail = _customerBeforeEdit.ContactEmail;
        ((CustomerModel)customer).ContactPerson = _customerBeforeEdit.ContactPerson;
        ((CustomerModel)customer).ContactPhone = _customerBeforeEdit.ContactPhone;
        ((CustomerModel)customer).InvoiceAddress = _customerBeforeEdit.InvoiceAddress;
        ((CustomerModel)customer).OrgNr = _customerBeforeEdit.OrgNr;
        _customerBeforeEdit = null;
    }

    private void UndoNewCustomer()
    {
        AllCustomers!.Remove(_selectedCustomer!);
        StateHasChanged();
    }

    private void ShowCustomerDetails(string name)
    {
        var customer = AllCustomers!.First(e => e.Name == name);
        customer.ShowDetails = !customer.ShowDetails;
    }

    private void NavigateOnRowClick(TableRowClickEventArgs<CustomerModel> selectedCustomer)
    {
      Navigation.NavigateTo($"/kunder/{selectedCustomer.Item.Id}");
    }

}