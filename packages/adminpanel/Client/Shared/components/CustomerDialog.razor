@using System.ComponentModel.DataAnnotations
@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer

<MudDialog>
    <DialogContent>
        <MudForm
            @ref="_form"
            @bind-IsValid="@_success"
            @bind-errors="@_errors">
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.OrgNr"]"
                @bind-Value="_orgNr"
                />
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.Name"]"
                @bind-Value="_name"
                Required="true"
                RequiredError="@Localizer["Validation.Name.Required"]"/>
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.InvoiceAddress"]"
                @bind-Value="_invoiceAddress"/>
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.ContactPerson"]"
                @bind-Value="_contactPerson"/>
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.Email"]"
                @bind-Value="_contactEmail"
                Validation="@(new Func<string, string>(ValidateEmail))"
                />
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.Telephone"]"
                @bind-Value="_contactPhone"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton
            Color="Color.Tertiary"
            Variant="Variant.Filled"
            OnClick="() => Cancel()">
            <TextAdjuster>
                @Localizer["Common.Cancel"]
            </TextAdjuster>
        </MudButton>
        <MudButton
            Color="Color.Secondary"
            Variant="Variant.Filled"
            OnClick="() => Submit()">
            <TextAdjuster>
                @Localizer["Common.Save"]
            </TextAdjuster>
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] private HttpClient HttpClient { get; set; }

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    [Parameter] public EventCallback OnCustomerSubmit { get; set; }
    [Parameter] public int? CustomerId { get; set; }
    [Parameter] public CustomerModel? CurrentCustomerData { get; set; }

    private bool _success;
    private string[] _errors = { };
    private MudForm _form = new();
    private string? _orgNr = "";
    private string? _name = "";
    private string? _invoiceAddress = "";
    private string? _contactPerson = "";
    private string? _contactEmail = "";
    private string? _contactPhone = "";

    protected override Task OnParametersSetAsync()
    {
        if (CurrentCustomerData is not null)
        {
            _orgNr = CurrentCustomerData.OrgNr;
            _name = CurrentCustomerData.Name;
            _invoiceAddress = CurrentCustomerData.InvoiceAddress;
            _contactPerson = CurrentCustomerData.ContactPerson;
            _contactEmail = CurrentCustomerData.ContactEmail;
            _contactPhone = CurrentCustomerData.ContactPhone;
        }

        return base.OnParametersSetAsync();
    }

    private async Task Submit()
    {
        _form.ResetValidation();
        await _form.Validate();


        if (_form.IsValid)
        {
            // Create new customer object and save

            var newCustomerObject = new CustomerModel
            {
                OrgNr = _orgNr,
                Name = _name,
                InvoiceAddress = _invoiceAddress,
                ContactPerson = _contactPerson,
                ContactEmail = _contactEmail,
                ContactPhone = _contactPhone,
            };

            try
            {
                if (CurrentCustomerData is null && CustomerId is null)
                {
                    // this a new customer
                    await HttpClient.PostAsJsonAsync(ApiRoutes.CustomersBase, newCustomerObject.MapToCustomerUpsertRequest());
                }
                else
                {
                    // save the edited customer
                    await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateCustomer((int)CustomerId!), newCustomerObject!.MapToCustomerUpsertRequest());
                }

                // Refresh in parent
                await OnCustomerSubmit.InvokeAsync();
                // Close dialog
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (HttpRequestException)
            {
            }
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private string ValidateEmail(string? emailValue)
    {
        // if the email field is empty, return without validation
        if (string.IsNullOrEmpty(emailValue))
            return "";

        // use EmailAddressAttribute to validate the email if the field is not empty
        var emailAttribute = new EmailAddressAttribute();
        return !emailAttribute.IsValid(emailValue) ? @Localizer["Validation.Email.NotValid"] : ""; 
    }

}