@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer

<MudDialog>
    <DialogContent>
        <MudForm
            @ref="_form"
            @bind-IsValid="@_success"
            @bind-errors="@_errors">
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.Name"]"
                @bind-Value="_name"
                Required="true"
                RequiredError="@Localizer["Validation.Name.Required"]"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton
            Color="Color.Tertiary"
            Variant="Variant.Filled"
            OnClick="() => Cancel()">
            <TextAdjuster>
                @Localizer["Common.Cancel"]
            </TextAdjuster>
        </MudButton>
        <MudButton
            Color="Color.Secondary"
            Variant="Variant.Filled"
            OnClick="() => Submit()">
            <TextAdjuster>
                @Localizer["Common.Save"]
            </TextAdjuster>
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] private HttpClient HttpClient { get; set; }
    
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    [Parameter] public EventCallback OnProjectSubmit { get; set; }
    [Parameter] public string? CustomerId { get; set; }
    [Parameter] public ProjectModel? SelectedProject { get; set; }

    private bool _success;
    private string[] _errors = { };
    private MudForm _form = new();
    private string? _name = "";
    private int? _projectId;
    
    protected override Task OnParametersSetAsync()
    {
        if (SelectedProject is not null)
        {
            _projectId = SelectedProject.Id;
            _name = SelectedProject.Name;
        }

        return base.OnParametersSetAsync();
    }
    
    private async Task Submit()
    {

        _form.ResetValidation();
        await _form.Validate();
        
        if (_form.IsValid)
        {
            // Create new project and save
            var newProject = new ProjectModel
            {
                Name = _name
            };

            try
            {
                if (!string.IsNullOrEmpty(CustomerId) && int.TryParse(CustomerId, out var parsedId))
                {
                    await HttpClient.PostAsJsonAsync(ApiRoutes.CreateProject(parsedId), newProject.MapToProjectUpsertRequest());
                }
                else if (_projectId is not null)
                {
                    await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateProject((int)_projectId), newProject.MapToProjectUpsertRequest());
                } 

                // Refresh in parent
                await OnProjectSubmit.InvokeAsync();
                
                // Close dialog
                MudDialog.Close(DialogResult.Ok(true));
            } catch (HttpRequestException){}
             
        }
     
    }
    
    private void Cancel()
    {
        MudDialog.Cancel();
    }
}