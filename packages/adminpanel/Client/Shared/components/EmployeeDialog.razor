@using System.ComponentModel.DataAnnotations
@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_success" @bind-errors="@_errors">
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="int?"
                Label="@Localizer["Common.EmployeeId"]"
                @bind-Value="_employeeId"
                Required="true"
                RequiredError="@Localizer["Validation.EmployeeId.Required"]"/>
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.Name"]"
                @bind-Value="_name"
                Required="true"
                RequiredError="@Localizer["Validation.Name.Required"]"/>
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.Email"]"
                @bind-Value="_email"
                Required="true"
                RequiredError="@Localizer["Validation.Email.Required"]"
                Validation="@(new EmailAddressAttribute() { ErrorMessage = @Localizer["Validation.Email.NotValid"] })"/>
            <MudDatePicker
                Label="@Localizer["Common.StartDate"]"
                @bind-Date="_startDate"
                DateFormat="dd/MM/yyyy"
                Required="true"
                RequiredError="@Localizer["Validation.Date.Required"]"/>
            <MudDatePicker
                Label="@Localizer["Common.EndDate"]"
                @bind-Date="_endDate"
                DateFormat="dd/MM/yyyy"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton
            Color="Color.Tertiary"
            Variant="Variant.Filled"
            OnClick="() => Cancel()">
            @Localizer["Common.Cancel"]
        </MudButton>
        <MudButton
            Color="Color.Secondary"
            Variant="Variant.Filled"
            OnClick="() => Submit()">
            @Localizer["Common.Save"]
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    [Parameter] public EventCallback OnEmployeeSubmit { get; set; }
    [Parameter] public int? EmployeeId { get; set; }
    [Parameter] public EmployeeModel? CurrentEmployeeData { get; set; }
    

    [Inject] private HttpClient HttpClient { get; set; }
    
    private bool _success;
    private string[] _errors = { };
    private MudForm _form = new();
    private string? _name;
    private string? _email;
    private int? _employeeId;
    private DateTime? _startDate = DateTime.UtcNow.Date;
    private DateTime? _endDate;

    protected override Task OnParametersSetAsync()
    {
        if (CurrentEmployeeData is not null)
        {
            _name = CurrentEmployeeData.Name;
            _email = CurrentEmployeeData.Email;
            _employeeId = CurrentEmployeeData.EmployeeId;
            _startDate = CurrentEmployeeData.StartDate;
            _endDate = CurrentEmployeeData.EndDate;
        }

        return base.OnParametersSetAsync();
    }
    private async Task Submit()
    {
        _form.ResetValidation();
        await _form.Validate();

        if (_form!.IsValid)
        {
            // Create new employee and save
            var newEmployee = new EmployeeModel
            {
                EmployeeId = _employeeId ?? 0,
                Name = _name ?? string.Empty,
                Email = _email ?? string.Empty,
                StartDate = _startDate,
                EndDate = _endDate
            };

            try
            {
                if (CurrentEmployeeData is null && EmployeeId is null)
                {
                    // save new employee
                    await HttpClient.PostAsJsonAsync(ApiRoutes.EmployeeBase, newEmployee.MapToEmployeeUpsertRequest());
                }
                else
                {
                    // save edited employee
                    await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateEmployee((int)EmployeeId!), newEmployee.MapToEmployeeUpsertRequest());
                }
           
                // Refresh on parent
                await OnEmployeeSubmit.InvokeAsync();
                // Close dialog
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (HttpRequestException)
            {
            
            }
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}