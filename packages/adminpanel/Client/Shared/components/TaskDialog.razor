@using System.Globalization
@using Alvtime.Adminpanel.Client.ErrorHandling
@using Alvtime.Adminpanel.Client.Mappers
@using Alvtime.Adminpanel.Client.Models
@using Alvtime.Adminpanel.Client.Requests
@using Alvtime.Adminpanel.Client.Resources
@using Alvtime.Adminpanel.Client.Utils
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedContentStrings> Localizer

<MudDialog>
    <DialogContent>
        <MudForm
            @ref="_form"
            @bind-IsValid="@_success"
            @bind-errors="@_errors">
            <MudSelect
                Class="mb-2"
                Label="@Localizer["Common.Project"]"
                @bind-Value="_selectedProjectId"
                Required="true"
                RequiredError="@Localizer["Validation.Project.Required"]"
                Disabled="@_editMode">
                @foreach (var project in Projects)
                {
                    <MudSelectItem T="int" Value="@project.Id">@project.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.Name"]"
                @bind-Value="_name"
                Required="true"
                RequiredError="@Localizer["Validation.Name.Required"]"/>
            <MudTextField
                Class="mb-2"
                ShrinkLabel="true"
                T="string"
                Label="@Localizer["Common.Description"]"
                @bind-Value="_description"/>
            <MudSelect
                Class="mb-2"
                T="decimal"
                @bind-Value="_compensationRate"
                Required
                RequiredError="@Localizer["Validation.CompensationRate.Required"]"
                Label="@Localizer["Common.CompensationRate"]">
                <MudSelectItem T="decimal" Value="0.5M">0,5</MudSelectItem>
                <MudSelectItem T="decimal" Value="1.0M">1,0</MudSelectItem>
                <MudSelectItem T="decimal" Value="1.5M">1,5</MudSelectItem>
                <MudSelectItem T="decimal" Value="2.0M" Disabled="@(_imposed is not true)">2,0</MudSelectItem>
            </MudSelect>
            <MudSwitch
                Class="mb-2"
                T="bool"
                Label="@Localizer["Common.Locked"]"
                Color="Color.Secondary"
                @bind-Value="_locked"/>
            <MudSwitch
                Class="mb-2"
                T="bool"
                Label="@Localizer["Common.Imposed"]"
                Color="Color.Secondary"
                @bind-Value="_imposed"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton
            Color="Color.Tertiary"
            Variant="Variant.Filled"
            OnClick="() => Cancel()">
            <TextAdjuster>
                @Localizer["Common.Cancel"]
            </TextAdjuster>
        </MudButton>
        <MudButton
            Color="Color.Secondary"
            Variant="Variant.Filled"
            OnClick="() => Submit()">
            <TextAdjuster>
                @Localizer["Common.Save"]
            </TextAdjuster>
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] private HttpClient HttpClient { get; set; }

    [CascadingParameter] private MudDialogInstance? MudDialog { get; set; }
    [Parameter] public EventCallback OnTaskSubmit { get; set; }
    [Parameter] public IEnumerable<ProjectModel> Projects { get; set; } = new List<ProjectModel>();
    [Parameter] public TaskModel? SelectedTask { get; set; }

    private bool _success;
    private string[] _errors = [];
    private MudForm _form = new();
    private int _selectedProjectId;
    private string _name = "";
    private string _description = "";
    private decimal _compensationRate = 0.5M;
    private bool _locked = false;
    private bool _imposed = false;
    private bool _editMode = false;

    protected override Task OnParametersSetAsync()
    {
        if (SelectedTask is not null)
        {
            _selectedProjectId = SelectedTask.ProjectId;
            _name = SelectedTask.Name;
            _description = SelectedTask.Description ?? "";
            _editMode = true;
        }
        else if (Projects.Any() && _selectedProjectId == 0)
        {
            _selectedProjectId = Projects.First().Id;
            _editMode = false;
        }

        return base.OnParametersSetAsync();
    }

    private async Task Submit()
    {
        _form.ResetValidation();
        await _form.Validate();

        if (_form.IsValid)
        {
            var newTask = new TaskModel
            {
                Name = _name,
                Description = _description,
                Locked = _locked,
                Imposed = _imposed,
                CompensationRate = _compensationRate,
            };


            try
            {
                switch (_editMode)
                {
                    case false:
                        await HttpClient.PostAsJsonAsync(ApiRoutes.CreateTask(_selectedProjectId), newTask.MapToTaskUpsertRequest());
                        break;
                    case true:
                        if (SelectedTask != null) await HttpClient.PutAsJsonAsync(ApiRoutes.UpdateTask(SelectedTask.Id), newTask.MapToTaskUpsertRequest());
                        break;
                }

                // Refresh in parent
                await OnTaskSubmit.InvokeAsync();

                // Close dialog
                MudDialog?.Close(DialogResult.Ok(true));
            }
            catch (HttpResponseException)
            {
            }
        }
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    /* TODO:
     * Grey area workaround used on compensation rate, to allow the user to use both decimal comma and decimal dot.
     * This hard codes the culture to nb-NO, and should be replaced with a more robust solution some time in the future,
     * if the solution is to add multi-language support.
     */
    private static Converter<decimal> _decimalConverter = new()
    {
        SetFunc = value => $"{value}",
        GetFunc = numberString =>
        {
            if (string.IsNullOrWhiteSpace(numberString)) return 0;
            numberString = numberString.Replace(".", ",");
            return !decimal.TryParse(numberString, NumberStyles.Any, new CultureInfo("nb-NO"), out var result) ? 0 : result;
        }
    };

}