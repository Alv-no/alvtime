trigger:
  branches:
    include:
      - master

pr: none

variables:
  - group: subscriptionIds
  - group: terraformStateStorage

  - name: dockerHubServiceConnection
    value: alvdockerdev

  - name: packageDiractory
    value: "$(System.DefaultWorkingDirectory)/packages/adminpanel"

  - name: serviceName
    value: "alvtime-admin-react-pwa-dev"
  - name: azureServiceConnection
    value: "Dev-Alv-Subscription-Azure-Service-Connection"

  - name: shortHash

jobs:
  - job: Deploy
    steps:
      - task: Bash@3
        displayName: Set variables
        inputs:
          targetType: inline
          script: |
            SHORT_HASH=`git rev-parse --short=7 HEAD`  ## At least 7 digits, more if needed for uniqueness
            echo "Short hash set to $SHORT_HASH"
            echo "##vso[task.setvariable variable=shortHash]$SHORT_HASH"

      - task: Docker@2
        displayName: Build and push Adminpanel to dockerhub
        inputs:
          containerRegistry: '$(dockerHubServiceConnection)'
          repository: 'alvnoas/$(serviceName)'
          command: 'build'
          Dockerfile: '**/Dockerfile'
          tags: '$(shortHash)'
          arguments: |
            --build-arg REACT_APP_API_HOST=https://alvtime-api-dev.azurewebsites.net
            --build-arg REACT_APP_ACCESS_SCOPE=https://d8aedd.alvtime-ap-alvtime-api-dev-f9b4e4.westeurope.cloudapp.azure.com/access_as_user
            --build-arg REACT_APP_CLIENT_ID=373a7768-6d2a-4b20-b671-bc1089104a3a

      - task: Docker@2
        inputs:
          containerRegistry: 'alvdockerdev'
          repository: 'alvnoas/$(serviceName)'
          command: 'push'
          tags: '$(shortHash)'

      - task: TerraformInstaller@0
        displayName: Install Terraform v0.13.0
        inputs:
          terraformVersion: "0.13.0"

      - task: TerraformTaskV1@0
        displayName: Terraform init
        inputs:
          provider: azurerm
          command: init
          workingDirectory: $(packageDiractory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateStorageResourceGroup)
          backendAzureRmStorageAccountName: $(terraformStateStorageStorageAccountDev)
          backendAzureRmContainerName: $(terraformStateStoreageContainer)
          backendAzureRmKey: "$(serviceName).tfstate"

      - task: TerraformTaskV1@0
        displayName: Terraform validate
        inputs:
          provider: azurerm
          workingDirectory: $(packageDiractory)
          command: validate

      - task: Bash@3
        displayName: Checkov Static Code Analysis
        inputs:
          targetType: inline
          script: |
            docker run -t -v "$(packageDiractory)":/tf bridgecrew/checkov -d /tf

      - task: TerraformTaskV1@0
        displayName: Terraform plan -out=tfplan
        inputs:
          provider: azurerm
          workingDirectory: $(packageDiractory)
          command: plan
          commandOptions: '-var "git_hash=$(shortHash)" -var "subscription_id=$(subscriptionIdDev)" -var "service_name=$(serviceName)" -out=tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)

      - task: TerraformTaskV1@0
        displayName: Terraform apply tfplan
        inputs:
          provider: azurerm
          workingDirectory: $(packageDiractory)
          command: apply
          commandOptions: tfplan
          environmentServiceNameAzureRM: $(azureServiceConnection)
